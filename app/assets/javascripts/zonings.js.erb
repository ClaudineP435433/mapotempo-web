// Copyright Â© Mapotempo, 2013-2014
//
// This file is part of Mapotempo.
//
// Mapotempo is free software. You can redistribute it and/or
// modify since you respect the terms of the GNU Affero General
// Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
// Mapotempo is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the Licenses for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Mapotempo. If not, see:
// <http://www.gnu.org/licenses/agpl.html>
//
function zonings_edit(params) {

  var zoning_id = params.zoning_id,
    planning_id = params.planning_id,
    map_layer_url = params.map_layer_url,
    map_lat = params.map_lat,
    map_lng = params.map_lng,
    map_attribution = params.map_attribution,
    vehicles_array = params.vehicles_array,
    vehicles_map = params.vehicles_map;

  var map = L.map('map').setView([map_lat, map_lng], 13);
  L.tileLayer(map_layer_url, {
    maxZoom: 18,
    attribution: map_attribution
  }).addTo(map);

  var markersLayers = L.layerGroup();
  var hasPlanning = false;
  var geoJsonLayers = {};

  var cluster = new L.MarkerClusterGroup({
    showCoverageOnHover: false
  });
  map.addLayer(cluster);

  map.on('zoomend ', function (e) {
    if (map.getZoom() > 12) {
      map.removeLayer(cluster);
      map.addLayer(markersLayers);
    } else {
      map.removeLayer(markersLayers);
      map.addLayer(cluster);
    }
  });

  var zone_map = {};

  var featureGroup = L.featureGroup().addTo(map);

  var drawControl = new L.Control.Draw({
    draw: {
      polyline: false,
      polygon: {
        allowIntersection: false, // Restricts shapes to simple polygons
        shapeOptions: {
          color: '#000000'
        }
      },
      rectangle: false,
      circle: false,
      marker: false
    },
    edit: {
      featureGroup: featureGroup
    }
  }).addTo(map);

  map.on('draw:created', function (e) {
    add_zone({
      'vehicles': vehicles_array,
      'polygon': JSON.stringify(e.layer.toGeoJSON())
    }, e.layer);
  });

  map.on('draw:edited', function (e) {
    e.layers.eachLayer(function (layer) {
      update_zone(layer);
    });
  });

  map.on('draw:deleted', function (e) {
    e.layers.eachLayer(function (layer) {
      del_zone(layer);
    });
  });

  function count_point_in_polygon(layer_id, ele) {
    if (hasPlanning) {
      geoJsonLayer = geoJsonLayers[layer_id];
      var n = 0;
      markersLayers.eachLayer(function (markerLayer) {
        if (leafletPip.pointInLayer(markerLayer.getLatLng(), geoJsonLayer, true).length > 0) {
          n += 1;
        }
      });
      $('.stop_number', ele).html(n);
      $('.stop').show(); // Display all
    }
  }

  function set_color(polygon, vehicles) {
    vehicles = $.grep(vehicles, function (vehicle, index) {
      return vehicle.selected;
    });
    polygon.setStyle({
      color: (vehicles.length > 0 ? vehicles_map[vehicles[0].id].color : '#000000')
    });
  }

  function format(state) {
    return "<span class='vehicle_color_small' style='background:" + vehicles_map[state.id].color + "'/>&nbsp;" + vehicles_map[state.id].name;
  }

  function add_zone(zone, geom) {
    var geoJsonLayer;
    if (geom instanceof L.GeoJSON) {
      geoJsonLayer = geom;
      geom = geom.getLayers()[0];
    } else {
      geoJsonLayer = L.geoJson();
      geoJsonLayer.addLayer(geom);
    }
    geoJsonLayers[geom._leaflet_id] = geoJsonLayer;

    featureGroup.addLayer(geom);

    zone.i18n = mustache_i18n;
    $('#zones').append(SMT['zones/show'](zone));
    var ele = $('#zones .zone:last');
    ele.data('feature', zone);
    zone_map[geom._leaflet_id] = {
      layer: geom,
      ele: ele
    };
    count_point_in_polygon(geom._leaflet_id, ele);

    var formatNoMatches = I18n.t('web.select2.empty_result');
    $('select', ele).select2({
      formatResult: format,
      formatSelection: format,
      formatNoMatches: function () {
        return formatNoMatches;
      },
      escapeMarkup: function (m) {
        return m;
      }
    });

    $('select', ele).change(function (e) {
      if (e.added) {
        $.each($('#zones .zone select option[value=' + e.added.id + ']'), function (index, option) {
          option = $(option);
          var select = option.closest('select');
          var ee = option.closest('.zone');
          if (!ee.is(ele)) {
            option.prop('selected', false);
            select.trigger("change");
          }
        });
      }
      var val = e.val || e.target.value;
      geom.setStyle({
        color: (val.length > 0 ? vehicles_map[val].color : '#000000')
      });
    });

    $('.delete', ele).click(function (event) {
      del_zone(geom);
    });
  }

  function del_zone(geom) {
    featureGroup.removeLayer(geom);
    var ele = zone_map[geom._leaflet_id].ele;
    ele.hide();
    ele.append('<input type="hidden" name="zoning[zones_attributes][][_destroy]" value="1"/>');
  }

  function update_zone(geom) {
    $('input[name=zoning\\[zones_attributes\\]\\[\\]\\[polygon\\]]', zone_map[geom._leaflet_id].ele).attr('value', JSON.stringify(geom.toGeoJSON()));
    count_point_in_polygon(geom._leaflet_id, zone_map[geom._leaflet_id].ele);
  }

  function display_zoning(data) {
    if (data.planning) {
      hasPlanning = true;
      $.each(data.planning, function (index, route) {
        $.each(route.stops, function (index, stop) {
          if (stop.lat && stop.lng) {
            L.marker(new L.LatLng(stop.lat, stop.lng), {
              icon: L.icon({
                iconUrl: stop.active && route.vehicle_id && vehicles_map[route.vehicle_id] ? vehicles_map[route.vehicle_id].marker : '<%= asset_path("point-000000.svg") %>',
                iconSize: new L.Point(12, 12),
                iconAnchor: new L.Point(6, 6),
                popupAnchor: new L.Point(1, 11)
              })
            }).addTo(markersLayers).addTo(cluster);
          }
        });
      });
    }
    $.each(data.zoning, function (index, zone) {
      var geom = L.geoJson(JSON.parse(zone.polygon));
      set_color(geom, zone.vehicles);
      add_zone(zone, geom);
    });

    map.fitBounds(featureGroup.getBounds());
  }

  $.ajax({
    url: '/zonings/' + (zoning_id ? zoning_id + '/edit' : 'new') + (planning_id ? '/planning/' + planning_id : '') + '.json',
    beforeSend: beforeSendWaiting,
    success: display_zoning,
    complete: completeWaiting,
    error: ajaxError
  });
}

Paloma.controller('Zoning').prototype.new = function () {
};

Paloma.controller('Zoning').prototype.create = function () {
};

Paloma.controller('Zoning').prototype.edit = function () {
  zonings_edit(this.params);
};

Paloma.controller('Zoning').prototype.update = function () {
  zonings_edit(this.params);
};
