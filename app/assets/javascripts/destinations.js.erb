// Copyright Â© Mapotempo, 2013-2014
//
// This file is part of Mapotempo.
//
// Mapotempo is free software. You can redistribute it and/or
// modify since you respect the terms of the GNU Affero General
// Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
// Mapotempo is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the Licenses for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Mapotempo. If not, see:
// <http://www.gnu.org/licenses/agpl.html>
//
function destinations_form(params, api) {

  var destination_id = params.destination_id,
    map_layer_url = params.map_layer_url,
    map_lat = params.map_lat,
    map_lng = params.map_lng,
    map_attribution = params.map_attribution,
    marker_lat = $(":input[name$=\\[lat\\]]").val(),
    marker_lng = $(":input[name$=\\[lng\\]]").val();

  var map = L.map('map').setView([marker_lat || map_lat, marker_lng || map_lng], 13);
  L.tileLayer(map_layer_url, {
    maxZoom: 18,
    attribution: map_attribution
  }).addTo(map);

  var markers = {};

  var pointing = false;
  var pointing_cursor;
  var icon_default = new L.Icon.Default();

  function geocoding_accuracy(destination) {
    if (destination.geocoding_accuracy) {
      if (destination.geocoding_accuracy > <%= Mapotempo::Application.config.geocoding_accuracy_success %>) {
        destination.geocoding_status = 'success';
      } else if (destination.geocoding_accuracy > <%= Mapotempo::Application.config.geocoding_accuracy_warning %>) {
        destination.geocoding_status = 'warning';
      } else {
        destination.geocoding_status = 'danger';
      }
      destination.geocoding_accuracy_percent = Math.round(destination.geocoding_accuracy * 100);
    }
    return destination;
  }

  function wire(row) {
    var $row = $(row),
      id = $row.attr('data-destination_id');

    <% if Mapotempo::Application.config.geocode_complete %>
    $row.one("focus", ":input[name$=\\[street\\]]", function () {
      $(this).autocomplete({
        delay: 500,
        source: function (req, add) {
          $.ajax({
            type: "patch",
            data: $(":input", $row).serialize(),
            url: '/api/0.1/' + api + '/geocode_complete.json',
            beforeSend: beforeSendWaiting,
            success: function (data) {
              add($.map(data, function (val, i) {
                return {
                  label: val.street + ' ' + val.postalcode + ' ' + val.city,
                  value: val.street
                };
              }));
            },
            complete: completeWaiting,
            error: ajaxError
          });
        },
        select: function (event, ui) {
          event.target.value = ui.item.value;
          $(event.target).trigger('change');
        }
      });
    });
    <% end %>
    $row.on("change", ":input", function (event) {
      var url;
      if (event.currentTarget.name.match(/\[street\]|\[postalcode\]|\[city\]$/)) {
        url = '/api/0.1/' + api + '/geocode.json';
      } else if (event.currentTarget.name.match(/\[lat\]|\[lng\]/)) {
        url = '/api/0.1/' + api + '/geocode_reverse.json';
      } else {
        return;
      }
      $.ajax({
        type: "patch",
        data: $(":input", $row).serialize(),
        url: url,
        beforeSend: beforeSendWaiting,
        success: function (data) {
          update(id, data);
        },
        complete: completeWaiting,
        error: ajaxError
      });
    })
    .on("click", "input[name$=\\[street\\]] + .input-group-addon", function (event) {
      pointing = id;
      $('body').css('cursor', 'crosshair');
      pointing_cursor = $('.leaflet-container').css('cursor');
      $('.leaflet-container').css('cursor', 'crosshair');
    });

    var formatNoMatches = I18n.t('web.select2.empty_result');
    $('select[name$=\\[tag_ids\\]\\[\\]]').select2({
      formatSelection: function (item) {
        return format_tag(item);
      },
      formatResult: function (item) {
        return format_tag(item);
      },
      formatNoMatches: function () {
        return formatNoMatches;
      },
      width: '100%'
    });

    $('#destination_take_over').timeEntry({
      show24Hours: true,
      showSeconds: true,
      initialField: 1,
      defaultTime: new Date(0, 0, 0, 0, 0, 0),
      spinnerImage: ''
    });

    $('#destination_open, #destination_close').timeEntry({
      show24Hours: true,
      spinnerImage: ''
    });
  }

  function update(destination_id, destination) {
    var row = $('[data-destination_id=' + destination_id + ']');
    $('[name$=\\[name\\]]', row).val(destination.name);
    $('[name$=\\[street\\]]', row).val(destination.street);
    $('[name$=\\[postalcode\\]]', row).val(destination.postalcode);
    $('[name$=\\[city\\]]', row).val(destination.city);
    $('[name$=\\[lat\\]]', row).val(destination.lat);
    $('[name$=\\[lng\\]]', row).val(destination.lng);
    if (destination_id in markers) {
      markers[destination_id].setLatLng(new L.LatLng(destination.lat, destination.lng));
    } else {
      addMarker(destination_id, destination.lat, destination.lng);
    }
    if (map.getZoom() != 16 || !map.getBounds().contains(markers[destination_id].getLatLng())) {
      map.setView(markers[destination_id].getLatLng(), 16);
    }
    if (destination.geocoding_accuracy) {
      destination = geocoding_accuracy(destination);
      var progress = $('.progress div');
      $('#geocoding_accuracy').show();
      $('#no_geocoding_accuracy').hide();
      progress.css('width', destination.geocoding_accuracy_percent + '%');
      progress.removeClass('progress-bar-success progress-bar-warning progress-bar-danger');
      progress.addClass('progress-bar-' + destination.geocoding_status);
      $('.progress div span').html(destination.geocoding_accuracy_percent + '%');
    } else {
      $('#geocoding_accuracy').hide();
      $('#no_geocoding_accuracy').show();
    }
  }

  function sendMove(id, latLng) {
    var row = $('[data-destination_id=' + id + ']');
    $('[name$=\\[lat\\]]', row).val(latLng.lat);
    $('[name$=\\[lng\\]]', row).val(latLng.lng).trigger('change');
  }

  map.on('click', function (mouseEvent) {
    if (pointing !== false) {
      if (pointing in markers) {
        markers[pointing].setLatLng(mouseEvent.latlng);
      } else {
        addMarker(pointing, mouseEvent.latlng.lat, mouseEvent.latlng.lng);
      }
      sendMove(pointing, mouseEvent.latlng);
      pointing = false;
      $('body').css('cursor', '');
      $('.leaflet-container').css('cursor', pointing_cursor);
    }
  });

  wire($("form"));

  function addMarker(id, lat, lng) {
    var marker = L.marker(new L.LatLng(lat, lng), {
      icon: icon_default,
      draggable: true,
      destination: id
    }).addTo(map);
    marker.on('dragend', function (event) {
      sendMove(event.target.options.destination, event.target.getLatLng());
    });
    markers[id] = marker;
  }

  if (marker_lat && marker_lng) {
    addMarker(destination_id, marker_lat, marker_lng);
  }
}

function destinations_new(params, api) {
  destinations_form(params, api);
}

function destinations_edit(params, api) {
  destinations_form(params, api);
}

Paloma.controller('Destination').prototype.new = function () {
  destinations_new(this.params, 'destinations');
};

Paloma.controller('Destination').prototype.create = function () {
  destinations_new(this.params, 'destinations');
};

Paloma.controller('Destination').prototype.edit = function () {
  destinations_edit(this.params, 'destinations');
};

Paloma.controller('Destination').prototype.update = function () {
  destinations_edit(this.params, 'destinations');
};

Paloma.controller('Store').prototype.new = function () {
  destinations_new(this.params, 'stores');
};

Paloma.controller('Store').prototype.create = function () {
  destinations_new(this.params, 'stores');
};

Paloma.controller('Store').prototype.edit = function () {
  destinations_edit(this.params, 'stores');
};

Paloma.controller('Store').prototype.update = function () {
  destinations_edit(this.params);
};

function destinations_import(params) {
  $("#dialog-upload").dialog({
    autoOpen: false,
    modal: true
  });

  $(":file").filestyle({
    buttonName: "btn-primary",
    iconName: "fa fa-folder-open",
    buttonText: I18n.t('web.choose_file')
  });

  $("form").submit(function () {
    $("#dialog-upload").dialog("open");
  });
}

Paloma.controller('Destination').prototype.import = function () {
  destinations_import(this.params);
}

Paloma.controller('Destination').prototype.upload = function () {
  destinations_import(this.params);
}

function destinations_index(params) {

  var map_layer_url = params.map_layer_url,
    map_lat = params.map_lat,
    map_lng = params.map_lng,
    map_attribution = params.map_attribution,
    default_city = params.default_city;

  var map = L.map('map').setView([map_lat, map_lng], 13);
  L.tileLayer(map_layer_url, {
    maxZoom: 18,
    attribution: map_attribution
  }).addTo(map);

  var markers = {};
  var markersLayers = L.featureGroup();

  var cluster = new L.MarkerClusterGroup({
    showCoverageOnHover: false
  });
  map.addLayer(cluster);

  map.on('zoomend ', function (e) {
    if (map.getZoom() > 14) {
      map.removeLayer(cluster);
      map.addLayer(markersLayers);
    } else {
      map.removeLayer(markersLayers);
      map.addLayer(cluster);
    }
  });

  var tags = {};
  var pointing = false;
  var pointing_cursor;
  var icon_default = new L.Icon.Default();
  var icon_over = L.icon({
    iconUrl: '/images/marker-FFBB00.svg'
  });
  var icon_over_stack = [];

  function prepare_display_destination(destination) {
    var t = [];
    $.each(tags, function (i, tag) {
      t.push({
        id: tag.id,
        label: tag.label,
        color: tag.color,
        icon: tag.icon,
        active: $.inArray(tag.id, destination.tag_ids) >= 0
      });
    });
    destination.tags = t;
    destination.i18n = mustache_i18n;
    if (destination.geocoding_accuracy) {
      if (destination.geocoding_accuracy > <%= Mapotempo::Application.config.geocoding_accuracy_success %>) {
        destination.geocoding_status = 'success';
      } else if (destination.geocoding_accuracy > <%= Mapotempo::Application.config.geocoding_accuracy_warning %>) {
        destination.geocoding_status = 'warning';
      } else {
        destination.geocoding_status = 'danger';
      }
      destination.geocoding_accuracy_percent = Math.round(destination.geocoding_accuracy * 100);
    }
    return destination;
  }

  function wire(row) {
    var $row = $(row),
      id = $row.attr('data-destination_id');

    <% if Mapotempo::Application.config.geocode_complete %>
    $row.one("focus", ":input[name$=\\[street\\]]", function () {
      $(this).autocomplete({
        delay: 500,
        source: function (req, add) {
          $.ajax({
            type: "patch",
            data: $(":input", $row).serialize(),
            url: '/api/0.1/destinations/geocode_complete.json',
            beforeSend: beforeSendWaiting,
            success: function (data) {
              add($.map(data, function (val, i) {
                return {
                  label: val.street + ' ' + val.postalcode + ' ' + val.city,
                  value: val.street
                };
              }));
            },
            complete: completeWaiting,
            error: ajaxError
          });
        },
        select: function (event, ui) {
          event.target.value = ui.item.value;
          $(event.target).trigger('change');
        }
      });
    });
    <% end %>
    $row.on("change", ":input", function (event) {
      $.ajax({
        type: "put",
        data: $(":input", $row).serialize(),
        url: '/api/0.1/destinations/' + id + '.json' + ((['destination[lat]', 'destination[lng]'].indexOf(event.currentTarget.name) >= 0) ? '?reverse=true': ''),
        beforeSend: beforeSendWaiting,
        success: function (data) {
          update(id, data);
        },
        complete: completeWaiting,
        error: ajaxError
      });
    })
    .on("click", "input[name$=\\[city\\]] + .input-group-addon", function (event) {
      pointing = id;
      $('body').css('cursor', 'crosshair');
      pointing_cursor = $('.leaflet-container').css('cursor');
      $('.leaflet-container').css('cursor', 'crosshair');
    })
    .click(function (event) {
      over(id, true);
    })
    .on("click", ".destroy", function (event) {
      if (confirm(I18n.t('all.verb.destroy_confirm'))) {
        $.ajax({
          type: "delete",
          url: '/api/0.1/destinations/' + id + '.json',
          beforeSend: beforeSendWaiting,
          success: function (data) {
            row.remove();
            markersLayers.removeLayer(markers[id]);
            cluster.removeLayer(markers[id]);
            delete markers[id];
            count_dec();
          },
          complete: completeWaiting,
          error: ajaxError
        });
      }
    });

    var formatNoMatches = I18n.t('web.select2.empty_result');
    $('select[name$=\\[tag_ids\\]\\[\\]]', $row).select2({
      formatSelection: function (item) {
        return format_tag(item);
      },
      formatResult: function (item) {
        return format_tag(item);
      },
      formatNoMatches: function () {
        return formatNoMatches;
      },
      width: '100%'
    });
  }

  function update(destination_id, destination) {
    var row = $('[data-destination_id=' + destination_id + ']'),
    destination = prepare_display_destination(destination);
    $(row).replaceWith(SMT['destinations/show'](destination));
    row = $('[data-destination_id=' + destination.id + ']');
    wire(row);
    $('.destinations').trigger('update');

    if(destination.lat && destination.lng) {
      if (destination.id in markers) {
        markers[destination_id].setLatLng(new L.LatLng(destination.lat, destination.lng));
      } else {
        addMarker(destination.id, destination.lat, destination.lng);
      }
      if (map.getZoom() != 16 || !map.getBounds().contains(markers[destination.id].getLatLng())) {
        map.setView(markers[destination.id].getLatLng(), 16);
      }
    } else {
      delete markers[destination.id];
    }
  }

  function count() {
    var n = $('.destinations tr:visible').length;
    $("#count").html(n);
  }

  function count_inc() {
    $("#count").html(parseInt($("#count").text()) + 1);
  }

  function count_dec() {
    $("#count").html(parseInt($("#count").text()) - 1);
  }

  function sendMove(id, latLng) {
    var row = $('[data-destination_id=' + id + ']');
    $('[name$=\\[lat\\]]', row).val(latLng.lat);
    $('[name$=\\[lng\\]]', row).val(latLng.lng).trigger('change');
  }

  map.on('click', function (mouseEvent) {
    if (pointing !== false) {
      if (pointing in markers) {
        markers[pointing].setLatLng(mouseEvent.latlng);
      } else {
        addMarker(pointing, mouseEvent.latlng.lat, mouseEvent.latlng.lng);
      }
      sendMove(pointing, mouseEvent.latlng);
      pointing = false;
      $('body').css('cursor', '');
      $('.leaflet-container').css('cursor', pointing_cursor);
    }
  });

  function over(id, move) {
    // clean over
    $('.destination').removeClass('highlight');
    var i;
    while (i = icon_over_stack.pop()) {
      if (i in markers) {
        markers[i].setIcon(icon_default);
      }
    }

    // new over
    if (id in markers) {
      if (move) {
        if (map.getZoom() != 16 || !map.getBounds().contains(markers[id].getLatLng())) {
          map.setView(markers[id].getLatLng(), 16);
        }
      }
      markers[id].setIcon(icon_over);
      icon_over_stack.push(id);
    }
    var row = $('[data-destination_id=' + id + ']');
    row.addClass('highlight');
    if (row.position().top < $("#destination_box").scrollTop() || row.position().top > $("#destination_box").scrollTop() + $("#destination_box").height()) {
      $("#destination_box").animate({scrollTop: row.position().top - 100});
    }
  }

  function addMarker(id, lat, lng) {
    var marker = L.marker(new L.LatLng(lat, lng), {
      icon: icon_default,
      draggable: true,
      destination: id
    }).addTo(markersLayers).addTo(cluster);
    marker.on('dragend', function (event) {
      sendMove(event.target.options.destination, event.target.getLatLng());
    });
    marker.on('mouseover', function (mouseEvent) {
      if (!pointing) {
        over(mouseEvent.target.options.destination, false);
      }
    });
    markers[id] = marker;
  }

  $("#add").click(function (event) {
    var id = 0;
    var center = map.getCenter();
    var destination = {
      id: id,
      name: I18n.t('destinations.index.default_name'),
      city: default_city,
      lat: center.lat,
      lng: center.lng
    };
    $.ajax({
      type: "post",
      data: JSON.stringify(destination),
      contentType: 'application/json',
      url: '/api/0.1/destinations.json',
      beforeSend: beforeSendWaiting,
      success: function (data) {
        update(id, data);
        destination.i18n = mustache_i18n;
        $(".destinations").append(SMT['destinations/show'](data));
        wire($('[data-destination_id=' + data.id + ']'));
        over(data.id, true);
        count_inc();
      },
      complete: completeWaiting,
      error: ajaxError
    });
  });

  function filter_text(exactText, normalizedValue, filter, index) {
    return !!String(normalizedValue).match(new RegExp(filter, 'i'));
  }

  function filter_number(exactText, normalizedValue, filter, index) {
    return normalizedValue == filter;
  }

  function display_destinations(data) {
    if ($("#dialog-geocoding").size() == 0) {
      return; // Avoid render and loop with turbolink when page is over
    }
    if (!progress_dialog(data.geocoding, $("#dialog-geocoding"), display_destinations, '/destinations.json', '/api/0.1/customers/job_geocoding.json')) {
      return;
    }

    var table = $('.destinations');
    $.each(data.tags, function (i, tag) {
      tags[tag.id] = tag;
    });
    $.each(data.destinations, function (i, destination) {
      destination = prepare_display_destination(destination);
      $(table).append(SMT['destinations/show'](destination));
      if (destination.lat && destination.lng) {
        addMarker(destination.id, destination.lat, destination.lng);
      }
    });

    if (markersLayers.getLayers().length > 0) {
      map.fitBounds(markersLayers.getBounds());
    }

    count();

    $('tr', table).each(function (index, element) {
      wire(element);
    });

    $("#destination_box table").tablesorter({
      headers: {
        3: {
          sorter: "digit"
        },
        4: {
          sorter: false
        },
        5: {
          sorter: false
        },
        6: {
          sorter: false
        },
        7: {
          sorter: false
        },
        8: {
          sorter: "digit"
        },
        9: {
          sorter: false
        }
      },
      textExtraction: function (node, table, cellIndex) {
        if (cellIndex == 7) {
          return $.map($("[name$=\\[tag_ids\\]\\[\\]] :selected", node), function (e, i) {
            return e.text;
          }).join(",");
        } else {
          return $.map($(":input", node), function (e, i) {
            return e.value;
          }).join(",");
        }
      },
      theme: "bootstrap",
      // Show order icon v and ^
      headerTemplate: '{content} {icon}',
      widgets: ["uitheme", "filter", "columnSelector"],
      widgetOptions: {
        filter_childRows: true,
        // class name applied to filter row and each input
        filter_cssFilter: "tablesorter-filter",
        filter_functions: {
          0: filter_text,
          1: filter_text,
          2: filter_text,
          3: filter_number,
          4: filter_text,
          5: function(e, n, f, i, $r) {
            n = n.split(',');
            n[0] = n[0].split(':');
            n[0] = new Date(2000, 01, 01, n[0][0], n[0][1]);
            n[1] = n[1].split(':');
            n[1] = new Date(2000, 01, 01, n[1][0], n[1][1]);

            f = f.split(' - ');
            f[0] = new Date(2000, 01, 01, f[0]);
            f[1] = new Date(2000, 01, 01, f[1]);

            return (isNaN(n[0].getTime()) || f[0] <= n[0]) && (isNaN(n[0].getTime()) || n[1] <= f[1]);
          },
          6: filter_text,
          7: filter_text
        },
        filter_formatter: {
          5: function ($cell, indx) {
            return $.tablesorter.filterFormatter.uiRange($cell, indx, {
              values: [0, 24],
              min: 0,
              max: 24,
              delayed: false,
              valueToHeader: false
            });
          },
          8: function ($cell, indx) {
            return false;
          },
          9: function ($cell, indx) {
            return false;
          }
        },
        columnSelector_container : $('#columnSelector'),
        columnSelector_layout : '<li role="presentation"><label><input type="checkbox">{name}</label></li>',
        columnSelector_columns : {
          0: true,
          1: 'disable',
          2: 'disable',
          3: true,
          4: false,
          5: true,
          6: true,
          7: true,
          8: true,
          9: 'disable'
        },
      }
    }).bind('filterEnd', function (e, filter) {
      count();

      markersLayers.clearLayers();
      cluster.clearLayers();
      $('.destinations tr:visible').each(function (i, e) {
        var marker = markers[$(e).attr('data-destination_id')];
        markersLayers.addLayer(marker);
        cluster.addLayer(marker);
      });
    });
    $(".tablesorter-filter").addClass("form-control input-sm"); // filter_cssFilter not support setting multiple class at once
  }

  $.ajax({
    url: '/destinations.json',
    beforeSend: beforeSendWaiting,
    success: display_destinations,
    complete: completeWaiting,
    error: ajaxError
  });

  $("#dialog-geocoding").dialog({
    autoOpen: false,
    modal: true
  });
}

Paloma.controller('Destination').prototype.index = function () {
  destinations_index(this.params);
};
