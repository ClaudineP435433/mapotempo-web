// Copyright Â© Mapotempo, 2013-2014
//
// This file is part of Mapotempo.
//
// Mapotempo is free software. You can redistribute it and/or
// modify since you respect the terms of the GNU Affero General
// Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
// Mapotempo is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the Licenses for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Mapotempo. If not, see:
// <http://www.gnu.org/licenses/agpl.html>
//

//= require leaflet_numbered_markers
//= require Polyline.encoded.js

function plannings_form() {
  var formatNoMatches = I18n.t('web.select2.empty_result');
  $('select[name=planning\\[tag_ids\\]\\[\\]]').select2({
    formatNoMatches: function () {
      return formatNoMatches;
    },
    width: '100%'
  });
}

function plannings_new(params) {
  plannings_form();
}

function plannings_edit(params) {
  plannings_form();

  var planning_id = params.planning_id,
    zoning_id = params.zoning_id,
    map_layer_url = params.map_layer_url,
    map_lat = params.map_lat,
    map_lng = params.map_lng,
    map_attribution = params.map_attribution,
    routes_id = params.routes_id,
    vehicles_array = params.vehicles_array,
    vehicles_map = params.vehicles_map,
    map = L.map('map').setView([map_lat, map_lng], 13),
    layer_zoning,
    markers = {},
    layers = {};

  L.tileLayer(map_layer_url, {
    maxZoom: 18,
    attribution: map_attribution
  }).addTo(map);

  $.each(routes_id, function (i, id) {
    layers[id] = L.layerGroup();
  });

  function display_zoning(zoning) {
    if (layer_zoning) {
      map.removeLayer(layer_zoning);
    }
    layer_zoning = new L.LayerGroup();
    $.each(zoning.zones, function (index, zone) {
      var geom = L.geoJson(JSON.parse(zone.polygon)).getLayers()[0];
      geom.setStyle({
        color: (zone.vehicles.length > 0 ? vehicles_map[zone.vehicles[0].id].color : '#000000')
      });
      geom.addTo(layer_zoning);
    });
    layer_zoning.addTo(map);
  }

  $("#planning_zoning_id").change(function () {
    var id = $(this).val();
    if (id) {
      $("#zoning_new").hide();

      $("#zoning_edit")
        .show()
        .attr("href", "/zonings/" + id + "/edit/planning/" + planning_id);

      $.ajax({
        type: "get",
        url: "/zonings/" + id + ".json",
        beforeSend: beforeSendWaiting,
        success: display_zoning,
        complete: completeWaiting,
        error: ajaxError
      });
    } else {
      $("#zoning_edit").hide();
      $("#zoning_new").show();
      map.removeLayer(layer_zoning);
      layer_zoning = null;
    }
  });

  function update_planning(event, ui) {
    var data = $('#planning > ol > li').map(function () {
      return {
        'route': $(this).attr("data-route_id"),
        'destinations': $('li[data-destination_id]', this).map(function () {
          return {
            'id': parseInt($(this).attr("data-destination_id")),
            'active': $('input', this).is(':checked')
          };
        }).get()
      };
    }).get();
    $.ajax({
      type: "patch",
      data: JSON.stringify(data),
      contentType: 'application/json',
      url: '/plannings/' + planning_id + '/move.json',
      beforeSend: beforeSendWaiting,
      success: display_planning,
      complete: completeWaiting,
      error: function (request, status, error) {
        ajaxError(request, status, error);
        $("#out_of_road, .stops").sortable('cancel');
      }
    });
  }

  function display_planning(data) {
    if ($("#dialog-matrix").size() == 0) {
      return; // Avoid render and loop with turbolink when page is over
    }
    if (!progress_dialog(data.matrix, $("#dialog-matrix"), display_planning, '/plannings/' + planning_id + '.json', '/customer/job_matrix.json')) {
      return;
    }
    if (!progress_dialog(data.optimizer, $("#dialog-optimizer"), display_planning, '/plannings/' + planning_id + '.json', '/customer/job_optimizer.json')) {
      return;
    }

    $.each(data.routes, function (i, route) {
      if (route.vehicle_id) {
        route.vehicle = vehicles_map[route.vehicle_id];
        route.path = '/vehicles/' + route.vehicle_id + '/edit';
      }
    });

    data.i18n = mustache_i18n;
    $("#planning").html(SMT['plannings/edit'](data));

    $(".routes").on('change', 'input:checkbox', function (event, ui) {
      var route_id = $(this).closest("[data-route_id]").attr("data-route_id");
      var destination_id = $(this).closest("[data-destination_id]").attr("data-destination_id");
      var active = $(this).is(':checked');
      $.ajax({
        type: "patch",
        data: JSON.stringify({
          stop: {
            active: active
          }
        }),
        contentType: 'application/json',
        url: '/plannings/' + planning_id + '/' + route_id + '/' + destination_id + '.json',
        beforeSend: beforeSendWaiting,
        success: display_planning,
        complete: completeWaiting,
        error: ajaxError
      });
    });

    var store_marker = L.marker(new L.LatLng(data.store.lat, data.store.lng), {
      icon: L.icon({
        iconUrl: data.store.icon,
        iconSize: [32, 32],
        iconAnchor: [16, 16]
      })
    });
    store_marker.addTo(map);

    function formatVehicles(state) {
      return "<span class='vehicle_color_small' style='background:" + vehicles_map[state.id].color + "'/>&nbsp;" + vehicles_map[state.id].name;
    }

    var formatNoMatches = I18n.t('web.select2.empty_result');
    $(".vehicle_select").select2({
      data: {
        results: vehicles_array,
        text: 'name'
      },
      formatSelection: formatVehicles,
      formatResult: formatVehicles,
      formatNoMatches: function () {
        return formatNoMatches;
      }
    });

    $.each(data.routes, function (i, route) {
      map.removeLayer(layers[route.route_id]);
      layers[route.route_id] = L.layerGroup();
      if (!route.hidden) {
        layers[route.route_id].addTo(map);
      }

      var color;
      if (route.vehicle) {
        $(".route[data-route_id=" + route.route_id + "] .vehicle_select").select2('val', {
          'id': route.vehicle.id,
          'name': route.vehicle.name
        }).trigger("change");
        color = route.vehicle.color;
      }

      $.each(route.stops, function (index, stop) {
        if (stop.trace) {
          var polyline = new L.Polyline(L.PolylineUtil.decode(stop.trace, 6));
          L.polyline(polyline.getLatLngs(), {
            color: color
          }).addTo(layers[route.route_id]);
        }
        if (stop.destination.lat && stop.destination.lng) {
          if (stop.is_store) {
            markers[stop.destination.id] = store_marker;
          } else {
            stop.i18n = mustache_i18n;
            stop.color = color;
            var m = L.marker(new L.LatLng(stop.destination.lat, stop.destination.lng), {
              icon: new L.NumberedDivIcon({
                number: stop.number,
                iconUrl: color ? route.icon : '<%= asset_path("point-000000.svg") %>',
                iconSize: new L.Point(12, 12),
                iconAnchor: new L.Point(6, 6),
                popupAnchor: new L.Point(0, -6)
              })
            }).addTo(layers[route.route_id]).bindPopup(SMT['stops/show'](stop));
            m.on('mouseover', function(e){
              m.openPopup();
            }).on('mouseout', function(e){
              m.closePopup();
            });
            markers[stop.destination.id] = m;
          }
        }
      });
    });

    $(".vehicle_select").change(function () {
      $.ajax({
        type: "patch",
        data: JSON.stringify({
          route_id: $(this).closest("[data-route_id]").attr("data-route_id"),
          vehicle_id: $(this).val()
        }),
        contentType: 'application/json',
        url: '/plannings/' + planning_id + '/switch.json',
        beforeSend: beforeSendWaiting,
        success: display_planning,
        complete: completeWaiting,
        error: ajaxError
      });
    });

    $('.btn.extend').click(function () {
      $('.container').toggleClass('box-extended');
    });

    $(".routes").sortable({
      items: "li.route"
    }).disableSelection();

    $("#out_of_road").sortable({
      connectWith: ".sortable",
      update: update_planning
    }).disableSelection();

    var sortableUpdate = false;
    $(".stops").sortable({
      connectWith: ".sortable",
      items: "li",
      cancel: "li.store",
      start: function (event, ui) {
        sortableUpdate = false;
      },
      update: function (event, ui) {
        sortableUpdate = true;
      },
      stop: function (event, ui) {
        if (sortableUpdate) {
          update_planning(event, ui);
        }
      }
    }).disableSelection();

    $("#refresh").click(function (event, ui) {
      $.ajax({
        type: "get",
        url: '/plannings/' + planning_id + '/refresh.json',
        beforeSend: beforeSendWaiting,
        success: display_planning,
        complete: completeWaiting,
        error: ajaxError
      });
    });

    $(".routes")
      .on("click", ".toggle", function (event, ui) {
        var id = $(this).closest("[data-route_id]").attr("data-route_id");
        var li = $("ul.stops, ol.stops", $(this).closest("li"));
        li.toggle();
        var hidden = !li.is(":visible");
        $.ajax({
          type: "patch",
          data: JSON.stringify({
            route: {
              hidden: hidden
            }
          }),
          contentType: 'application/json',
          url: '/routes/' + id + '.json',
          error: ajaxError
        });

        var i = $("i", this);
        if (hidden) {
          i.removeClass("icon-eye-open").addClass("icon-eye-close");
          map.removeLayer(layers[id]);
        } else {
          i.removeClass("icon-eye-close").addClass("icon-eye-open");
          layers[id].addTo(map);
        }
      })
      .on("click", ".marker", function (event, ui) {
        var id = $(this).closest("[data-destination_id]").attr("data-destination_id");
        if (id in markers) {
          map.setView(markers[id].getLatLng(), 16);
          markers[id].openPopup();
        }
        return false;
      })
      .on("click", ".optimize", function (event, ui) {
        var id = $(this).closest("[data-route_id]").attr("data-route_id");
        $.ajax({
          type: "get",
          url: '/plannings/' + planning_id + '/' + id + '/optimize.json',
          beforeSend: beforeSendWaiting,
          success: display_planning,
          complete: completeWaiting,
          error: ajaxError
        });
      });

    $(".lock").click(function (event, ui) {
      var id = $(this).closest("[data-route_id]").attr("data-route_id");
      var i = $("i", this);
      i.toggleClass("icon-lock");
      i.toggleClass("icon-unlock");
      var locked = i.hasClass("icon-lock");
      $.ajax({
        type: "patch",
        data: JSON.stringify({
          route: {
            locked: locked
          }
        }),
        contentType: 'application/json',
        url: '/routes/' + id + '.json',
        error: ajaxError
      });
    });
  }

  $.ajax({
    url: '/plannings/' + planning_id + '.json',
    beforeSend: beforeSendWaiting,
    success: display_planning,
    complete: completeWaiting,
    error: ajaxError
  });

  if (zoning_id) {
    $.ajax({
      type: "get",
      url: "/zonings/" + zoning_id + ".json",
      beforeSend: beforeSendWaiting,
      success: display_zoning,
      complete: completeWaiting,
      error: ajaxError
    });
  }

  $("#dialog-matrix").dialog({
    autoOpen: false,
    modal: true
  });

  $("#dialog-optimizer").dialog({
    autoOpen: false,
    modal: true
  });
}

Paloma.controller('Planning').prototype.new = function () {
  plannings_new(this.params);
};

Paloma.controller('Planning').prototype.create = function () {
  plannings_new(this.params);
};

Paloma.controller('Planning').prototype.edit = function () {
  plannings_edit(this.params);
};

Paloma.controller('Planning').prototype.update = function () {
  plannings_edit(this.params);
};
